package database.classes;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;

import webscraping.extracteddata.objects.RegistryCNMV;

/*
CREATE TABLE IF NOT EXISTS financialinfo (
	id bigint(20) NOT NULL AUTO_INCREMENT,
	url_ixbrl text NOT NULL,
	url_info_context text NOT NULL,
	entity_name text NOT NULL,
	entity_code text NOT NULL,
	period_end text NOT NULL,
	form text NOT NULL,
	format text NOT NULL,
	hash_code varchar(64) NOT NULL,
	oam text NOT NULL,
	country text NOT NULL,
	PRIMARY KEY (id)
);
 */

/**
 * Class that manages access to the database.
 * It is mainly responsible for entering and collecting data.
 * 
 * @author	Enrique Morales Montero
 * @author	Javier Mora Gonzálbez (project manager)
 * @author	Carlos Cano Ladera (collaborator, code reviewer)
 * @since	29/3/2019
 * @version	3/4/2019
 */
public class DataBaseManager {
	
	// Fields.
	
	private static final String DB_DRIVER = "com.mysql.jdbc.Driver";
	private static final String HOST_AND_PORT = "jdbc:mysql://localhost:3307/cnmv";
	private static final String USER = "admin";
	private static final String PASSWORD = "admin";
	
	/**
	 * Object of connection to the database.
	 * It is provided by the driver.
	 */
	private Connection connection;
	
	// Constructors.
	
	/**
	 * Simple constructor.
	 * It is only used to instantiate the object.
	 */
	public DataBaseManager() {}
	
	// Methods.
	
	/**
	 * Procedure that opens the connection to the database.
	 * It interacts with the driver to get the connection.
	 * 
	 * @see DataBaseManager#connection	connection - Treated field.
	 */
	private void openConection() {
		
		try {
			Class.forName(DB_DRIVER);
			connection = DriverManager.getConnection(HOST_AND_PORT, USER, PASSWORD);
		} catch (SQLException e) {
			System.err.println("SQL exception when opening the database...");
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			System.err.println("Class not found. Check the MySQL access driver...");
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Procedure that closes the connection to the database.
	 * 
	 * @see DataBaseManager#openConection() openConection() - Analogous method.
	 * @see DataBaseManager#connection		connection		- Treated field.
	 */
	private void closeConection() {
		
		try {
			connection.close();
		} catch (SQLException e) {
			System.err.println("Exception when closing the database...");
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Function that controls whether the database is empty or not.
	 * 
	 * @return 	<ul>
     * 		<li>True:	The database has registries.</li>
     * 		<li>False:	The database is empty.</li>
     * 			</ul>
	 * @see DataBaseManager#openConection() openConection() - Necessary method.
	 */
	public boolean hasRegistries() {
		
		openConection();												// Connection to the database: open.
		
		String query = "SELECT COUNT(*) FROM financialinfo";			// SQL query.
		
		try {
			
			boolean hasRegistries = false;
			int totalRegistries = 0;
			
			Statement sentence = connection.createStatement();			// The object used for executing a static SQL statementand returning the results it produces.
			ResultSet resul = sentence.executeQuery(query);				// A table of data representing a database result set, which is usually generated by executing a statement that queries the database. 
			
			while (resul.next()) {totalRegistries = resul.getInt(1);}	// The code takes any result.
			if (totalRegistries > 0) {hasRegistries = true;}			// Are there registries?
			
			resul.close();												// Closing objects and connections.
			sentence.close();
			closeConection();
			
			return hasRegistries;
			
		} catch (SQLException e) {
			closeConection();
			System.err.println("SQL exception when consulting the number of registries that the database contains...");
			e.printStackTrace();
			System.exit(1);
		}
		
		closeConection();
		
		return false;
	}

	/**
	 * Procedure that stores in the database the new records of the CNMV, stored in a list.
	 * 
	 * @param list - ArrayList with the new data.
	 * @see DataBaseManager#openConection() openConection() - Necessary method.
	 */
	public void store(ArrayList<RegistryCNMV> list) {
		
		int rowsInserted = 0;
		
		openConection(); 			// Connection to the database: open.
				
		Collections.reverse(list);	// Reverse the list.
		
		// Insertion loop.
		
		System.out.println("\tIns\tMessage");
		
		for (RegistryCNMV registry : list) {
			rowsInserted = storeRegistry(rowsInserted, registry);	// Storing data...
		}
		
		System.out.println("\n\tTOTAL: " + rowsInserted + " insertions.");
		
		closeConection();			// Connection to the database: close.
	}

	/**
	 * Auxiliary method.
	 * To insert a record.
	 * 
	 * @param	rowsInserted	- Counter number.
	 * @param	registry		- Extracted data.
	 * @return	Number of rows inserted.
	 */
	private int storeRegistry(int rowsInserted, RegistryCNMV registry) {
		
		// SQL query.
		
		String query = String.format("INSERT INTO financialinfo (url_ixbrl, url_info_context, entity_name, entity_code, period_end, form, format, hash_code, oam, country) SELECT '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s' FROM dual WHERE NOT EXISTS (SELECT url_info_context FROM financialinfo WHERE url_info_context = '%s') LIMIT 1",
				registry.getUrl_ixbrl(),
				registry.getUrl_info_context(),
				registry.getEntity_name(),
				registry.getEntity_code(),
				registry.getPeriod_end(),
				registry.getForm(),
				registry.getFormat(),
				registry.getHash_code(),
				registry.getOam(),
				registry.getCountry(),
				registry.getUrl_info_context()
				);

		int newRows = 0;

		try {
			Statement sentence = connection.createStatement();	// The object used for executing a static SQL statementand returning the results it produces.
			newRows = sentence.executeUpdate(query);			// SQL: executed!
			rowsInserted += newRows;
			
			if (newRows > 0) {
				System.out.println("\t" + rowsInserted + "\tRegistry inserted!");
			}
			
			sentence.close();
			
		} catch (SQLException e) {
			System.err.println("SQL exception in the insertion.");
			System.err.printf("Message  : %s %n", e.getMessage());
			System.err.printf("SQL state: %s %n", e.getSQLState());
			System.err.printf("Cod error: %s %n", e.getErrorCode());
		}
		return rowsInserted;
		
	}

	/**
	 * Function that collects the last url_info_context stored in the database.
	 * This data will be used to avoid having to examine all the records that are published on the CNMV website with the scraper.
	 * This would take a long time, so speed is gained.
	 * 
	 * @return An String (last url_info_context).
	 * @see webscraping.collectors.Scraper Scraper - For extracting data from the CNMV website.
	 */
	public String getLastUrlInfoContext() {
		
		openConection();											// Connection to the database: open.
		
		String query = "SELECT url_info_context FROM financialinfo ORDER by ID DESC LIMIT 1";
		String lastContext = "NULL";
		
		try {			
			Statement sentence = connection.createStatement();		// The object used for executing a static SQL statementand returning the results it produces.	
			ResultSet resul = sentence.executeQuery(query);			// A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
			
			while (resul.next()) {
				lastContext = resul.getString("url_info_context");	// Getting the last url_info_context...
			}
			
			resul.close();											// Closing access objects.
			sentence.close();
			closeConection();
			
			return lastContext;
			
		} catch (SQLException e) {
			System.err.println("SQL exception when consulting the last registry in the database...");
			e.printStackTrace();
			System.exit(1);
		}
		
		closeConection();
		
		return lastContext;
	}
	
}